---
groups:
- name: All
  jobs:
  - build_binaries
  - GPDB4.3
  - GPDB5
  - GPDB5-oracle7
  - GPDB5-sles11
  - GPDB6
  - master
  - s3_plugin_tests
  - backward-compatibility
  - ddboost_plugin_and_boostfs_tests
  - scale-43
  - scale-5x
  - scale-6x
  - scale-master
  - build_dependencies
  - push-to-github
  - package_gpbackup_for_release
  - push-to-pivnet-gpbackup
- name: GPDB4.3
  jobs:
  - GPDB4.3
- name: GPDB5
  jobs:
  - GPDB5
  - GPDB5-oracle7
  - GPDB5-sles11
  - s3_plugin_tests
  - ddboost_plugin_and_boostfs_tests
  - backward-compatibility
- name: GPDB6
  jobs:
  - GPDB6
- name: Master
  jobs:
  - master
- name: Scale
  jobs:
  - scale-43
  - scale-5x
  - scale-6x
  - scale-master
- name: Packaging and Release
  jobs:
  - push-to-github
  - package_gpbackup_for_release
  - push-to-pivnet-gpbackup

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final


resources:
##### Docker Images #####
- name: centos7-image
  type: docker-image
  source:
    repository: pivotaldata/centos-gpdb-dev
    tag: '7-gcc6.2-llvm3.7'

- name: centos6-image
  type: docker-image
  source:
    repository: pivotaldata/centos-gpdb-dev
    tag: '6-gcc6.2-llvm3.7'

##### Other Resources #####
- name: nightly-trigger
  type: time
  source:
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 6:00 AM
    stop: 7:00 AM

# TODO mark these as src with name change
- name: gpbackup
  type: git
  source:
    uri: https://github.com/greenplum-db/gpbackup
    branch: {{gpbackup-git-branch}}

- name: gpbackup_s3_plugin
  type: git
  source:
    branch: master
    uri: https://github.com/greenplum-db/gpbackup-s3-plugin

- name: gpbackup_ddboost_plugin
  type: git
  source:
    branch: master
    private_key: {{gpbackup-ddboost-plugin-remote-key}}
    uri: {{gpbackup-ddboost-plugin-git-remote}}

- name: gpbackup_manager_src
  type: git
  source:
    branch: master
    private_key: {{gp-backup-manager-remote-deploy-key}}
    uri: {{gp-backup-manager-git-remote}}

- name: gpbackup_tagged_src
  type: git
  source:
    branch: master
    uri: https://github.com/greenplum-db/gpbackup
    tag_filter: 1.*

- name: gpbackup_s3_plugin_tagged_src
  type: git
  source:
    branch: master
    uri: https://github.com/greenplum-db/gpbackup-s3-plugin
    tag_filter: 1.*

- name: gpbackup_ddboost_plugin_tagged_src
  type: git
  source:
    branch: master
    private_key: {{gpbackup-ddboost-plugin-remote-key}}
    uri: {{gpbackup-ddboost-plugin-git-remote}}
    tag_filter: 1.*

- name: gpdb5_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 5X_STABLE
    tag_filter: 5.*

- name: gpdb6_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 6X_STABLE
    tag_filter: 6.*

- name: gpdb_master_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: master
    tag_filter: 7.*

- name: bin_gpdb_master_centos6
  type: gcs
  source:
      bucket: ((gcs-bucket))
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/master/server-rc-(.*)-rhel6_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_master_centos7
  type: gcs
  source:
      bucket: ((gcs-bucket))
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/master/server-rc-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: gpbackup-dependencies
  type: s3
  source:
      bucket: gpbackup-dependencies
      versioned_file: gpbackup-dependencies/dependencies.tar.gz
      region_name: us-west-2
      access_key_id: {{bucket-access-key-id}}
      secret_access_key: {{bucket-secret-access-key}}

- name: dummy_seclabel_linux_gpdb6
  type: gcs
  source:
    bucket: dummy_seclabel_gpdb_linux
    json_key: ((gcp_svc_acct_key))
    regexp: dummy_seclabel_gpdb6-v(.*).so

- name: dummy_seclabel_linux_master
  type: gcs
  source:
    bucket: dummy_seclabel_gpdb_linux
    json_key: ((gcp_svc_acct_key))
    regexp: dummy_seclabel_gpdb7-v(.*).so

- name: bin_gpdb_5x_stable_centos6
  type: s3
  source:
      bucket: gpdb-stable-concourse-builds
      versioned_file: release_candidates/bin_gpdb_centos6/gpdb5/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{bucket-access-key-id}}
      secret_access_key: {{bucket-secret-access-key}}

- name: bin_gpdb_5x_stable_centos7
  type: s3
  source:
      bucket: gpdb-stable-concourse-builds
      versioned_file: release_candidates/bin_gpdb_centos7/gpdb5/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{bucket-access-key-id}}
      secret_access_key: {{bucket-secret-access-key}}

- name: bin_gpdb_6x_stable_centos6
  type: gcs
  source:
      bucket: ((gcs-bucket))
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/gpdb6/server-rc-(.*)-rhel6_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_6x_stable_centos7
  type: gcs
  source:
      bucket: ((gcs-bucket))
      json_key: ((concourse-gcs-resources-service-account-key))
      regexp: server/published/gpdb6/server-rc-(.*)-rhel7_x86_64((rc-build-type-gcs)).tar.gz

- name: bin_gpdb_43_stable
  type: s3
  source:
      bucket: gpdb-4.3-stable-concourse
      versioned_file: bin_gpdb_centos/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{gpdb4-bucket-access-key-id}}
      secret_access_key: {{gpdb4-bucket-secret-access-key}}

- name: ccp_src
  type: git
  source:
    branch: {{ccp-git-branch}}
    private_key: {{ccp-git-key}}
    uri: {{ccp-git-remote}}

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      bucket: {{tf-bucket-name}}
      bucket_path: clusters-google/

- name: ddboost_terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      bucket: {{tf-bucket-name}}
      bucket_path: clusters-aws/

- name: scale_schema
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{dpm_bucket}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: scale-schemas/scale_db1.tgz

- name: boostfs_installer
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{dpm_bucket}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: DDBoostFS-1.1.0.1-565598.rhel.x86_64.rpm

- name: slack-alert
  type: slack-notification
  source:
    url: {{dpm_webhook_url}}
    disable: ((dpm_disable_slack_alert))

- name: github_release_components
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: components/gpbackup/gpbackup-(.*).tar.gz

- name: gppkgs
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    versioned_file: gppkgs/gpbackup-gppkgs.tar.gz

- name: gpbackup_github_release
  type: github-release
  source:
    owner: greenplum-db
    repository: gpbackup
    access_token: {{gpbackup-git-access-token}}
    release: ((dpm-enable-release))

- name: terraform_aws
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      # This is not parameterized, on purpose. All tfstates will go to this spot,
      # and different teams will place there clusters' tfstate files under different paths
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-aws/

- name: pivnet-gpbackup
  type: pivnet
  source:
    api_token: ((pivnet_api_token))
    product_slug: ((pivnet_product_slug))
    endpoint: ((pivnet_endpoint))
    bucket: ((pivnet_bucket_name))
    access_key_id: ((pivnet_bucket_access_key_id))
    secret_access_key: ((pivnet_bucket_secret_access_key))
    region: ((pivnet_aws_region))
    sort_by: semver

- name: gpbackup-release-license
  type: gcs
  source:
    bucket: gpbackup-release-licenses
    json_key: ((gcp_svc_acct_key))
    regexp: gpbackup-osl-v(.*).txt

jobs:
- name: build_binaries
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: gpbackup_s3_plugin
    - get: gpbackup-dependencies
    - get: gpbackup_manager_src
    - get: nightly-trigger
      trigger: true
  - task: build-binaries
    config:
      platform: linux
      inputs:
        - name: gpbackup-dependencies
        - name: gpbackup
          path: go/src/github.com/greenplum-db/gpbackup
        - name: gpbackup_s3_plugin
          path: go/src/github.com/greenplum-db/gpbackup-s3-plugin
        - name: gpbackup_manager_src
          path: go/src/github.com/pivotal/gp-backup-manager
      outputs:
        - name: github_release_components
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: '1.12.5'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          export GOPATH=$(pwd)/go
          export PATH=$PATH:$GOPATH/bin

          tar -zxf gpbackup-dependencies/dependencies.tar.gz -C $GOPATH/src/github.com/greenplum-db/gpbackup/

          # Build gpbackup
          pushd $GOPATH/src/github.com/greenplum-db/gpbackup
            make depend

            # NOTE: we are building binaries without a cluster installed, so distributing the backup_helper fails--continue anyway
            CGO_ENABLED=0 make build || true
            version=`git describe --tags | perl -pe 's/(.*)-([0-9]*)-(g[0-9a-f]*)/\1+dev.\2.\3/'`
          popd
          echo ${version} > gpbackup_version

          # Build s3 plugin
          pushd $GOPATH/src/github.com/greenplum-db/gpbackup-s3-plugin
            make depend
            CGO_ENABLED=0 make build
            s3_plugin_version=`git describe --tags | perl -pe 's/(.*)-([0-9]*)-(g[0-9a-f]*)/\1+dev.\2.\3/'`
          popd
          echo ${s3_plugin_version} > s3_plugin_version

          # todo handle ddboost in different container

          # gpbackup-manager
          pushd $GOPATH/src/github.com/pivotal/gp-backup-manager
            make depend
            CGO_ENABLED=0 make build
          popd

          # prepare github release; also, the bin_gpbackup.tar.gz file is used in the next build_gppkg task
          pushd github_release_components
            # Create install script
            printf "#!/bin/sh\nset -x\ntar -xzvf bin_gpbackup.tar.gz -C \$GPHOME" > install_gpdb_component
            chmod +x install_gpdb_component

            # Create test script
            cp ../gpbackup_version .
            cp ../gpbackup_version version
            cp ../s3_plugin_version .
            cp $GOPATH/src/github.com/greenplum-db/gpbackup/ci/scripts/smoke_test_component_gpbackup.sh smoke_test_gpdb_component
            # Assemble binaries
            mkdir -p bin
            cp $GOPATH/bin/gpbackup bin/
            cp $GOPATH/bin/gpbackup_helper bin/
            cp $GOPATH/bin/gprestore bin/
            cp $GOPATH/bin/gpbackup_s3_plugin bin/
            cp $GOPATH/bin/gpbackup_manager bin/

            # Test package
            export PATH=$PATH:`pwd`/bin
            # TODO reenable this
            # ./smoke_test_gpdb_component

            tar -czvf bin_gpbackup.tar.gz bin/

            tar -czvf "gpbackup-${version}.tar.gz" bin_gpbackup.tar.gz install_gpdb_component smoke_test_gpdb_component gpbackup_version version s3_plugin_version
          popd

  - put: github_release_components
    params:
      file: github_release_components/gpbackup-*.tar.gz


- name: build_dependencies
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: gpbackup-dependencies
    - get: nightly-trigger
      trigger: true
  - task: build-dependencies
    file: gpbackup/ci/tasks/build-dependencies.yml
    attempts: 5
  - put: gpbackup-dependencies
    params:
        file: output_deps/dependencies.tar.gz

- name: s3_plugin_tests
  plan:
  - aggregate:
    - get: gpbackup_s3_plugin
      trigger: true
    - get: gpbackup
      trigger: true
    - get: ccp_src
    - get: gpdb5_src
    - get: bin_gpdb_5x_stable_centos6
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable_centos6
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: run_tests
    config:
      platform: linux
      inputs:
       - name: gpbackup
         path: go/src/github.com/greenplum-db/gpbackup
       - name: gpbackup_s3_plugin
         path: go/src/github.com/greenplum-db/gpbackup-s3-plugin
       - name: ccp_src
       - name: cluster_env_files

      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: '1.10.3'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh
          scp -r go/src/github.com/greenplum-db/gpbackup-s3-plugin mdw:/home/gpadmin/go/src/github.com/greenplum-db/gpbackup-s3-plugin

          cat <<SCRIPT > /tmp/run_tests.bash
            set -ex
            source env.sh

            cd \$GOPATH/src/github.com/greenplum-db
            pushd gpbackup-s3-plugin
              make depend
              make unit
              make build
            popd

            cat << CONFIG > \$HOME/s3_config.yaml
          executablepath: \$GPHOME/bin/gpbackup_s3_plugin
          options:
            region: us-west-2
            aws_access_key_id: {{bucket-access-key-id}}
            aws_secret_access_key: {{bucket-secret-access-key}}
            bucket: {{gpbackup-s3-plugin-test-bucket}}
            folder: test/backup
          CONFIG

            pushd gpbackup/plugins
            ./plugin_test_bench.sh \$GOPATH/bin/gpbackup_s3_plugin \$HOME/s3_config.yaml
          SCRIPT

          chmod +x /tmp/run_tests.bash
          scp /tmp/run_tests.bash mdw:/home/gpadmin/run_tests.bash
          ssh -t mdw "bash /home/gpadmin/run_tests.bash"
  on_success:
    <<: *ccp_destroy
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: ddboost_plugin_and_boostfs_tests
  plan:
  - aggregate:
    - get: gpbackup_ddboost_plugin
      tags: ["ddboost"]
      trigger: true
    - get: gpbackup
      tags: ["ddboost"]
      trigger: true
    - get: ccp_src
      tags: ["ddboost"]
    - get: gpdb5_src
      tags: ["ddboost"]
    - get: bin_gpdb_5x_stable_centos6
      tags: ["ddboost"]
    - get: boostfs_installer
      tags: ["ddboost"]
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      tags: ["ddboost"]
      passed:
       - build_dependencies
  - put: ddboost_terraform
    tags: ["ddboost"]
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws/
      vars:
        aws_instance-node-instance_type: t2.medium
        PLATFORM: centos6
  - task: gen_cluster
    params:
      <<: *ddboost_ccp_gen_cluster_default_params
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      terraform: ddboost_terraform
      gpdb_binary: bin_gpdb_5x_stable_centos6
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    tags: ["ddboost"]
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: install_dependencies
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: cluster_env_files
       - name: gpbackup_ddboost_plugin

      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '7-gcc6.2-llvm3.7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh

          scp -r gpbackup_ddboost_plugin mdw:/home/gpadmin/gpbackup_ddboost_plugin

          ssh -t centos@mdw "sudo yum install -y autoconf automake libtool"
          # TODO: this needs different logic for different version of GPDB
          ssh -t gpadmin@mdw "source env.sh; psql -d postgres -f \$GPHOME/share/postgresql/contrib/pgcrypto.sql"
    on_failure:
      do:
      - *slack_alert
      - *ddboost_debug_sleep
  - task: boostfs_installation
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: cluster_env_files
       - name: boostfs_installer
       - name: gpbackup
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          ccp_src/scripts/setup_ssh_to_cluster.sh
          export DD_IP={{datadomain_source_host}}
          export DD_USER={{datadomain_user}}
          export DD_PASSWORD={{datadomain_password}}
          chmod +x gpbackup/ci/scripts/setup_boostfs.sh
          gpbackup/ci/scripts/setup_boostfs.sh
    on_failure:
      do:
      - *ddboost_debug_sleep
  - task: run_tests
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: gpbackup
         path: go/src/github.com/greenplum-db/gpbackup
       - name: ccp_src
       - name: cluster_env_files

      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '7-gcc6.2-llvm3.7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh

          cat <<SCRIPT > /tmp/run_tests.bash
          set -ex
          source env.sh

          pushd gpbackup_ddboost_plugin
          make test
          make build
          make install

          # important: whitespace of yaml below is critical, do not change it
          cat << CONFIG > \$HOME/ddboost_config_replication.yaml
          executablepath: \$GPHOME/bin/gpbackup_ddboost_plugin
          options:
            hostname: {{datadomain_source_host}}
            username: {{datadomain_user}}
            storage_unit: GPDB
            directory: gpbackup_tests
            replication: on
            pgport: 5432
            remote_hostname: {{datadomain_dest_host}}
            remote_username: {{datadomain_user}}
            remote_storage_unit: GPDB
            remote_directory: gpbackup_tests
            password: {{encrypted_datadomain_password}}
            password_encryption: "on"
            remote_password: {{encrypted_datadomain_password}}
            remote_password_encryption: "on"
            gpbackup_ddboost_plugin: 66706c6c6e677a6965796f68343365303133336f6c73366b316868326764
          CONFIG

          # important: whitespace of yaml below is critical, do not change it
          cat << CONFIG > \$HOME/ddboost_config_replication_restore.yaml
          executablepath: \$GPHOME/bin/gpbackup_ddboost_plugin
          options:
            hostname: {{datadomain_dest_host}}
            username: {{datadomain_user}}
            password: {{datadomain_password}}
            storage_unit: GPDB
            directory: gpbackup_tests
            pgport: 5432
          CONFIG

          pushd \$GOPATH/src/github.com/greenplum-db/gpbackup/plugins

          ./plugin_test_bench.sh \$GPHOME/bin/gpbackup_ddboost_plugin \$HOME/ddboost_config_replication.yaml \$HOME/ddboost_config_replication_restore.yaml

          # exercise boostfs, which is mounted at /data/gpdata/dd_dir
          pushd \$GOPATH/src/github.com/greenplum-db/gpbackup
          make end_to_end CUSTOM_BACKUP_DIR=/data/gpdata/dd_dir/end_to_end
          SCRIPT

          chmod +x /tmp/run_tests.bash
          scp /tmp/run_tests.bash mdw:/home/gpadmin/run_tests.bash
          ssh -t mdw "bash /home/gpadmin/run_tests.bash"
    on_failure:
      do:
      - *slack_alert
      - *ddboost_debug_sleep
  ensure:
      <<: *ddboost_ccp_destroy

- name: GPDB5-sles11
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable_centos6
    - get: ccp_src
    - get: gpdb5_src
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        PLATFORM: sles12
        default_image_user: root
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: sles12
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable_centos6
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/sles-tests.yml
  on_success:
    <<: *ccp_destroy
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: GPDB5-oracle7
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable_centos7
    - get: ccp_src
    - get: gpdb5_src
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform_aws
    params:
      <<: *ccp_default_params_aws
      vars:
        <<: *ccp_default_vars_aws
        PLATFORM: oracle7
        default_ami_user: clckwrk
        disk_size: 30
  - task: gen_cluster
    tags: ['aws']
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      terraform: terraform_aws
      gpdb_binary: bin_gpdb_5x_stable_centos7
      gpdb5_src: gpdb5_src
    params:
      <<: *ccp_gen_cluster_default_params_aws
      PLATFORM: oracle7
  - task: gpinitsystem
    tags: ['aws']
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-oracle-env
    tags: ['aws']
    file: gpbackup/ci/tasks/setup-oracle-env.yml
  - task: integration-tests
    tags: ['aws']
    file: gpbackup/ci/tasks/all-tests.yml
  on_success:
    <<: *ccp_destroy_aws
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed_aws

- name: master
  plan:
  - aggregate:
    - get: centos6-image
    - get: centos7-image
    - get: gpbackup
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
    - get: bin_gpdb_master_centos6
    - get: bin_gpdb_master_centos7
    - get: gpdb_master_src
    - get: nightly-trigger
      trigger: true
    - get: dummy_seclabel_linux_master
  - aggregate:
    - task: run-tests-locally-centos6
      image: centos6-image
      file: gpbackup/ci/tasks/test-on-local-cluster.yml
      params:
        REQUIRES_DUMMY_SEC: true
      input_mapping:
        gpdb_src: gpdb_master_src
        bin_gpdb: bin_gpdb_master_centos6
        dummy_seclabel: dummy_seclabel_linux_master
    - task: run-tests-locally-centos7
      image: centos7-image
      file: gpbackup/ci/tasks/test-on-local-cluster.yml
      params:
        REQUIRES_DUMMY_SEC: true
      input_mapping:
        gpdb_src: gpdb_master_src
        bin_gpdb: bin_gpdb_master_centos7
        dummy_seclabel: dummy_seclabel_linux_master
  on_failure:
    *slack_alert

- name: GPDB5
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable_centos6
    - get: ccp_src
    - get: gpdb5_src
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable_centos6
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/all-tests.yml
  on_success:
    <<: *ccp_destroy
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: GPDB4.3
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_43_stable
    - get: ccp_src
    - get: gpdb5_src
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_43_stable
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/all-tests.yml
  on_success:
    <<: *ccp_destroy
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: GPDB6
  plan:
  - aggregate:
    - get: centos6-image
    - get: centos7-image
    - get: gpbackup
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
    - get: bin_gpdb_6x_stable_centos6
    - get: bin_gpdb_6x_stable_centos7
    - get: gpdb6_src
    - get: nightly-trigger
      trigger: true
    - get: dummy_seclabel_linux_gpdb6
  - aggregate:
    - task: run-tests-locally-centos6
      image: centos6-image
      file: gpbackup/ci/tasks/test-on-local-cluster.yml
      params:
        REQUIRES_DUMMY_SEC: true
      input_mapping:
        gpdb_src: gpdb6_src
        bin_gpdb: bin_gpdb_6x_stable_centos6
        dummy_seclabel: dummy_seclabel_linux_gpdb6
    - task: run-tests-locally-centos7
      image: centos7-image
      file: gpbackup/ci/tasks/test-on-local-cluster.yml
      params:
        REQUIRES_DUMMY_SEC: true
      input_mapping:
        gpdb_src: gpdb6_src
        bin_gpdb: bin_gpdb_6x_stable_centos7
        dummy_seclabel: dummy_seclabel_linux_gpdb6
  on_failure:
    *slack_alert

- name: backward-compatibility
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable_centos6
    - get: ccp_src
    - get: gpdb5_src
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable_centos6
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: backup-1.0.0-restore-latest
    file: gpbackup/ci/tasks/all-tests.yml
    params:
      GPBACKUP_VERSION: "1.0.0"
  - task: backup-1.7.1-restore-latest
    file: gpbackup/ci/tasks/all-tests.yml
    params:
      GPBACKUP_VERSION: "1.7.1"
  on_success:
    <<: *ccp_destroy
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: scale-master
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_master_centos6
    - get: ccp_src
    - get: gpdb_master_src
    - get: scale_schema
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-standard-8
        ccp_reap_minutes: 720
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_master_centos6
      gpdb_src: gpdb_master_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
  on_success:
    <<: *ccp_destroy_nvme
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: scale-6x
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_6x_stable_centos6
    - get: ccp_src
    - get: gpdb6_src
    - get: scale_schema
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-standard-8
        ccp_reap_minutes: 720
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_6x_stable_centos6
      gpdb_src: gpdb6_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
  on_success:
    <<: *ccp_destroy_nvme
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: scale-5x
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_5x_stable_centos6
    - get: ccp_src
    - get: gpdb5_src
    - get: scale_schema
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-standard-8
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable_centos6
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
  on_success:
    <<: *ccp_destroy_nvme
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: scale-43
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_43_stable
    - get: ccp_src
    - get: gpdb5_src
    - get: scale_schema
    - get: nightly-trigger
      trigger: true
    - get: gpbackup-dependencies
      passed:
       - build_dependencies
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-standard-8
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_43_stable
      gpdb_src: gpdb5_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
  on_success:
    <<: *ccp_destroy_nvme
  on_failure:
    *slack_alert
  ensure:
    <<: *set_failed

- name: package_gpbackup_for_release
  plan:
  - aggregate:
    - get: gpbackup_tagged_src
      trigger: true
    - get: gpbackup_s3_plugin_tagged_src
    - get: gpbackup_ddboost_plugin_tagged_src
    # While the resource is not used, it ensures only releasing if
    # tests are passing
    - get: gpbackup
      passed:
        - GPDB5
        - GPDB4.3
        - GPDB5-sles11
        - GPDB5-oracle7
        - master
        - backward-compatibility
        - s3_plugin_tests
        - ddboost_plugin_and_boostfs_tests
    - get: gpdb6_src
    - get: bin_gpdb_6x_stable_centos6
    - get: gpbackup-dependencies
  - task: compile_package
    file: gpbackup/ci/tasks/compile_package.yml
    params:
      IVYREPO_USER: {{ivyrepo_user}}
      IVYREPO_PASSWD: {{ivyrepo_passwd}}
      IVYREPO_HOST: {{ivyrepo_host}}
    on_failure:
      *slack_alert
  - task: build_gppkg
    file: gpbackup/ci/tasks/build-gppkg.yml
    input_mapping:
      gpdb_src: gpdb6_src
      bin_gpdb: bin_gpdb_6x_stable_centos6
    on_failure:
      *slack_alert
  - aggregate:
    - put: gppkgs
      params:
        file: gppkgs/gpbackup-gppkgs.tar.gz
    - put: github_release_components
      params:
        file: github_release_components/gpbackup-*.tar.gz

- name: push-to-github
  plan:
  - get: github_release_components
    passed: [package_gpbackup_for_release]

  - task: prepare-for-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '6-gcc6.2-llvm3.7'
      inputs:
        - name: github_release_components
      outputs:
        - name: github_release_components_untarred
      run:
        path: "sh"
        args:
          - -exc
          - |
            set -x
            tar xvzf github_release_components/*.gz -C github_release_components_untarred
            tar xvzf github_release_components_untarred/bin_gpbackup.tar.gz -C github_release_components_untarred
  - put: gpbackup_github_release
    params:
      name: github_release_components_untarred/gpbackup_version
      tag: github_release_components_untarred/gpbackup_version
      globs:
      - github_release_components_untarred/bin/gpbackup
      - github_release_components_untarred/bin/gprestore
      - github_release_components_untarred/bin/gpbackup_helper

- name: push-to-pivnet-gpbackup
  plan:
    - aggregate:
      - get: gppkgs
        passed: [package_gpbackup_for_release]
      - get: gpbackup
        passed: [package_gpbackup_for_release]
      - get: gpbackup-release-license
    - task: update metadata.yml
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: bash
        inputs:
          - name: gppkgs
          - name: gpbackup
          - name: gpbackup-release-license
        outputs:
          - name: workspace
        run:
          path: bash
          args:
            - -exc
            - |
              mkdir workspace/files-to-upload

              cp gpbackup/ci/pivnet_release/metadata.yml workspace/

              tar xzf gppkgs/gpbackup-gppkgs.tar.gz -C workspace/files-to-upload/

              RELEASE_VERSION=$(cat workspace/files-to-upload/gpbackup_version)

              if [ ! -f gpbackup-release-license/gpbackup-osl-v${RELEASE_VERSION}.txt ] ; then
                echo "License file gpbackup-osl-v${RELEASE_VERSION}.txt does not exist in resource.\n Ensure the OSL is properly uploaded to the GCS bucket prior to pushing to pivnet." 1>&2
                exit 1
              fi
              cp gpbackup-release-license/gpbackup-osl-v${RELEASE_VERSION}.txt workspace/files-to-upload/

              # TODO: currently, <VERSION> corresponds only with the tile release version. This poses an issue when we have a unique version upgrade for a plugin (which is included in this tile), but gpbackup remains the same. The division of releases and versioning is a product decision.
              sed -i "s/<VERSION>/${RELEASE_VERSION}/g" workspace/metadata.yml

              GPBAR_VERSION=$(echo workspace/files-to-upload/gpbackup-osl-v*.txt | sed -n 's#workspace/files-to-upload/gpbackup-osl-v\(.*\)\.txt#\1#p')
              sed -i "s/<GPBAR_VERSION>/${GPBAR_VERSION}/g" workspace/metadata.yml

              DDBOOST_PLUGIN_VERSION=$(cat workspace/files-to-upload/ddboost_plugin_version)
              sed -i "s/<DDBOOST_PLUGIN_VERSION>/${DDBOOST_PLUGIN_VERSION}/g" workspace/metadata.yml

              S3_PLUGIN_VERSION=$(cat workspace/files-to-upload/s3_plugin_version)
              sed -i "s/<S3_PLUGIN_VERSION>/${S3_PLUGIN_VERSION}/g" workspace/metadata.yml

              cat workspace/metadata.yml

              ls -l workspace/files-to-upload

    - put: pivnet-gpbackup
      params:
        metadata_file: workspace/metadata.yml
        file_glob: workspace/files-to-upload/*
        s3_filepath_prefix: ((pivnet_s3_filepath_prefix))

ccp_default_params_anchor: &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/google/

ccp_vars_anchor: &ccp_default_vars
  instance_type: n1-standard-1
  PLATFORM: centos6

ccp_gen_cluster_default_params_anchor: &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: google

ddboost_ccp_gen_cluster_default_params_anchor: &ddboost_ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-aws/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: aws

ccp_destroy_anchor: &ccp_destroy
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google/
    vars:
      aws_instance-node-instance_type: t2.micro
      aws_ebs_volume_type: standard
      instance_type: n1-standard-1
  get_params:
    action: destroy

ccp_nvme_destroy_anchor: &ccp_destroy_nvme
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google-nvme-block-device/
    vars:
      aws_instance-node-instance_type: t2.micro
      aws_ebs_volume_type: standard
      instance_type: n1-standard-1
  get_params:
    action: destroy

ddboost_ccp_destroy_anchor: &ddboost_ccp_destroy
  put: ddboost_terraform
  params:
    action: destroy
    env_name_file: ddboost_terraform/name
    terraform_source: ccp_src/aws/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
  get_params:
    action: destroy

set_failed_anchor: &set_failed
  do:
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

ddboost_debug_sleep_anchor: &ddboost_debug_sleep
  task: debug_sleep
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: alpine
        tag: latest
    run:
      path: 'sh'
      args: ['-c', 'sleep 2h']
  ensure:
    <<: *ddboost_ccp_destroy

ccp_default_params_aws_anchor: &ccp_default_params_aws
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/aws/

ccp_vars_anchor_aws: &ccp_default_vars_aws
  aws_instance-node-instance_type: t2.medium
  PLATFORM: centos6

ccp_gen_cluster_default_params_anchor_aws: &ccp_gen_cluster_default_params_aws
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-aws/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: aws

ccp_destroy_anchor_aws: &ccp_destroy_aws
  put: terraform_aws
  params:
    action: destroy
    env_name_file: terraform_aws/name
    terraform_source: ccp_src/aws/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
      aws_ebs_volume_type: standard
  get_params:
    action: destroy

set_failed_anchor_aws: &set_failed_aws
  do:
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform_aws
          path: terraform
      run:
        path: 'ccp_src/aws/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-aws/
        BUCKET_NAME: {{tf-bucket-name}}

slack_alert_anchor: &slack_alert
  put: slack-alert
  params:
    text: |
      [gpbackup/$BUILD_JOB_NAME] failed:
      https://prod.ci.gpdb.pivotal.io/teams/main/pipelines/gpbackup/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
